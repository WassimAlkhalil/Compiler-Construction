-- File generated by the BNF Converter (bnfc 2.9.4.1).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module SkelCPP where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified AbsCPP

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transId :: AbsCPP.Id -> Result
transId x = case x of
  AbsCPP.Id string -> failure x

transProgram :: AbsCPP.Program -> Result
transProgram x = case x of
  AbsCPP.PDefs defs -> failure x

transDef :: AbsCPP.Def -> Result
transDef x = case x of
  AbsCPP.FunDefWithBody type_ id args stms -> failure x
  AbsCPP.FunDefWithoutBody type_ id args -> failure x
  AbsCPP.InlineDefWithBody type_ id args stms -> failure x
  AbsCPP.InlineDefWithoutBody type_ id args -> failure x
  AbsCPP.DStructDef struct -> failure x
  AbsCPP.DVarDef variable -> failure x
  AbsCPP.FTopTypedef typedef -> failure x
  AbsCPP.DUsingDef qconst -> failure x

transStruct :: AbsCPP.Struct -> Result
transStruct x = case x of
  AbsCPP.DStructDecl id variables -> failure x

transStm :: AbsCPP.Stm -> Result
transStm x = case x of
  AbsCPP.SStructDef struct -> failure x
  AbsCPP.SVarStm variable -> failure x
  AbsCPP.STypedef typedef -> failure x
  AbsCPP.SExp exp -> failure x
  AbsCPP.SReturn exp -> failure x
  AbsCPP.SWhile exp stm -> failure x
  AbsCPP.SDoWhile stm exp -> failure x
  AbsCPP.SFor variable exp1 exp2 stm -> failure x
  AbsCPP.SIf exp stm -> failure x
  AbsCPP.SIfElse exp stm1 stm2 -> failure x
  AbsCPP.SBlock stms -> failure x

transVariable :: AbsCPP.Variable -> Result
transVariable x = case x of
  AbsCPP.VIdList type_ idlists -> failure x

transTypedef :: AbsCPP.Typedef -> Result
transTypedef x = case x of
  AbsCPP.DTypedef type_ id -> failure x

transArg :: AbsCPP.Arg -> Result
transArg x = case x of
  AbsCPP.ATypeDecl type_ -> failure x
  AbsCPP.ADeclId type_ idlist -> failure x

transExp :: AbsCPP.Exp -> Result
transExp x = case x of
  AbsCPP.EInt integer -> failure x
  AbsCPP.EDouble double -> failure x
  AbsCPP.EChar char -> failure x
  AbsCPP.EString strings -> failure x
  AbsCPP.EQConstant qconst -> failure x
  AbsCPP.ETrue -> failure x
  AbsCPP.EFalse -> failure x
  AbsCPP.EIndexing exp1 exp2 -> failure x
  AbsCPP.EFunctionCall exp exps -> failure x
  AbsCPP.EStructureProjection2 exp1 exp2 -> failure x
  AbsCPP.EStructureProjection1 exp1 exp2 -> failure x
  AbsCPP.EDecrementLeft exp -> failure x
  AbsCPP.EIncrementRightleft exp -> failure x
  AbsCPP.ENegation exp -> failure x
  AbsCPP.EDereference exp -> failure x
  AbsCPP.EDecrementRight exp -> failure x
  AbsCPP.EIncrementRight exp -> failure x
  AbsCPP.EUnaryMinus exp -> failure x
  AbsCPP.EUnaryPlus exp -> failure x
  AbsCPP.EReminder exp1 exp2 -> failure x
  AbsCPP.EDivision exp1 exp2 -> failure x
  AbsCPP.EMultiplication exp1 exp2 -> failure x
  AbsCPP.ESubtraction exp1 exp2 -> failure x
  AbsCPP.EAddition exp1 exp2 -> failure x
  AbsCPP.ERightShift exp1 exp2 -> failure x
  AbsCPP.ELeftShift exp1 exp2 -> failure x
  AbsCPP.EEquivalent exp1 exp2 -> failure x
  AbsCPP.ELessOrEqualThan exp1 exp2 -> failure x
  AbsCPP.EGreaterOrEqualThan exp1 exp2 -> failure x
  AbsCPP.EGreaterThan exp1 exp2 -> failure x
  AbsCPP.ELessThan exp1 exp2 -> failure x
  AbsCPP.EInequality exp1 exp2 -> failure x
  AbsCPP.EEquality exp1 exp2 -> failure x
  AbsCPP.EConjunction exp1 exp2 -> failure x
  AbsCPP.EDisjunction exp1 exp2 -> failure x
  AbsCPP.EAssignment1 exp1 exp2 -> failure x
  AbsCPP.EAssignment2 exp1 exp2 -> failure x
  AbsCPP.EAssignment3 exp1 exp2 -> failure x
  AbsCPP.ECondition exp1 exp2 exp3 -> failure x
  AbsCPP.ECoReturn exp -> failure x
  AbsCPP.ECoYield exp -> failure x
  AbsCPP.ECoAwait exp -> failure x
  AbsCPP.ETyped exp type_ -> failure x

transTempInstant :: AbsCPP.TempInstant -> Result
transTempInstant x = case x of
  AbsCPP.TTempInstant id types -> failure x

transQConst :: AbsCPP.QConst -> Result
transQConst x = case x of
  AbsCPP.QQConst names -> failure x

transName :: AbsCPP.Name -> Result
transName x = case x of
  AbsCPP.NameId id -> failure x
  AbsCPP.NameTempInstant tempinstant -> failure x

transType :: AbsCPP.Type -> Result
transType x = case x of
  AbsCPP.Type1 btype -> failure x
  AbsCPP.Type2 atype -> failure x
  AbsCPP.Type3 atype -> failure x
  AbsCPP.TypeAType atype -> failure x

transAType :: AbsCPP.AType -> Result
transAType x = case x of
  AbsCPP.AType1 gtype -> failure x
  AbsCPP.ATypeGType gtype -> failure x

transBType :: AbsCPP.BType -> Result
transBType x = case x of
  AbsCPP.BType1 gtype -> failure x
  AbsCPP.BTypeGType gtype -> failure x

transGType :: AbsCPP.GType -> Result
transGType x = case x of
  AbsCPP.GType_int -> failure x
  AbsCPP.GType_bool -> failure x
  AbsCPP.GType_char -> failure x
  AbsCPP.GType_double -> failure x
  AbsCPP.GType_void -> failure x
  AbsCPP.GTypeQConst qconst -> failure x

transIdList :: AbsCPP.IdList -> Result
transIdList x = case x of
  AbsCPP.IdListId id -> failure x
  AbsCPP.IdList1 id exp -> failure x
