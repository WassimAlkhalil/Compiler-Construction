-- File generated by the BNF Converter (bnfc 2.9.4.1).

{-# LANGUAGE CPP #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE LambdaCase #-}
#if __GLASGOW_HASKELL__ <= 708
{-# LANGUAGE OverlappingInstances #-}
#endif

-- | Pretty-printer for PrintCPP.

module PrintCPP where

import Prelude
  ( ($), (.)
  , Bool(..), (==), (<)
  , Int, Integer, Double, (+), (-), (*)
  , String, (++)
  , ShowS, showChar, showString
  , all, elem, foldr, id, map, null, replicate, shows, span
  )
import Data.Char ( Char, isSpace )
import qualified AbsCPP

-- | The top-level printing method.

printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 False (map ($ "") $ d []) ""
  where
  rend
    :: Int        -- ^ Indentation level.
    -> Bool       -- ^ Pending indentation to be output before next character?
    -> [String]
    -> ShowS
  rend i p = \case
      "["      :ts -> char '[' . rend i False ts
      "("      :ts -> char '(' . rend i False ts
      "{"      :ts -> onNewLine i     p . showChar   '{'  . new (i+1) ts
      "}" : ";":ts -> onNewLine (i-1) p . showString "};" . new (i-1) ts
      "}"      :ts -> onNewLine (i-1) p . showChar   '}'  . new (i-1) ts
      [";"]        -> char ';'
      ";"      :ts -> char ';' . new i ts
      t  : ts@(s:_) | closingOrPunctuation s
                   -> pending . showString t . rend i False ts
      t        :ts -> pending . space t      . rend i False ts
      []           -> id
    where
    -- Output character after pending indentation.
    char :: Char -> ShowS
    char c = pending . showChar c

    -- Output pending indentation.
    pending :: ShowS
    pending = if p then indent i else id

  -- Indentation (spaces) for given indentation level.
  indent :: Int -> ShowS
  indent i = replicateS (2*i) (showChar ' ')

  -- Continue rendering in new line with new indentation.
  new :: Int -> [String] -> ShowS
  new j ts = showChar '\n' . rend j True ts

  -- Make sure we are on a fresh line.
  onNewLine :: Int -> Bool -> ShowS
  onNewLine i p = (if p then id else showChar '\n') . indent i

  -- Separate given string from following text by a space (if needed).
  space :: String -> ShowS
  space t s =
    case (all isSpace t', null spc, null rest) of
      (True , _   , True ) -> []              -- remove trailing space
      (False, _   , True ) -> t'              -- remove trailing space
      (False, True, False) -> t' ++ ' ' : s   -- add space if none
      _                    -> t' ++ s
    where
      t'          = showString t []
      (spc, rest) = span isSpace s

  closingOrPunctuation :: String -> Bool
  closingOrPunctuation [c] = c `elem` closerOrPunct
  closingOrPunctuation _   = False

  closerOrPunct :: String
  closerOrPunct = ")],;"

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- | The printer class does the job.

class Print a where
  prt :: Int -> a -> Doc

instance {-# OVERLAPPABLE #-} Print a => Print [a] where
  prt i = concatD . map (prt i)

instance Print Char where
  prt _ c = doc (showChar '\'' . mkEsc '\'' c . showChar '\'')

instance Print String where
  prt _ = printString

printString :: String -> Doc
printString s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q = \case
  s | s == q -> showChar '\\' . showChar s
  '\\' -> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  s -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j < i then parenth else id

instance Print Integer where
  prt _ x = doc (shows x)

instance Print Double where
  prt _ x = doc (shows x)

instance Print AbsCPP.Id where
  prt _ (AbsCPP.Id i) = doc $ showString i
instance Print AbsCPP.Program where
  prt i = \case
    AbsCPP.PDefs defs -> prPrec i 0 (concatD [prt 0 defs])

instance Print [AbsCPP.Def] where
  prt _ [] = concatD []
  prt _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print AbsCPP.Def where
  prt i = \case
    AbsCPP.FunDefWithBody type_ id_ args stms -> prPrec i 0 (concatD [prt 0 type_, prt 0 id_, doc (showString "("), prt 0 args, doc (showString ")"), doc (showString "{"), prt 0 stms, doc (showString "}")])
    AbsCPP.FunDefWithoutBody type_ id_ args -> prPrec i 0 (concatD [prt 0 type_, prt 0 id_, doc (showString "("), prt 0 args, doc (showString ")"), doc (showString ";")])
    AbsCPP.InlineDefWithBody type_ id_ args stms -> prPrec i 0 (concatD [doc (showString "inline"), prt 0 type_, prt 0 id_, doc (showString "("), prt 0 args, doc (showString ")"), doc (showString "{"), prt 0 stms, doc (showString "}")])
    AbsCPP.InlineDefWithoutBody type_ id_ args -> prPrec i 0 (concatD [doc (showString "inline"), prt 0 type_, prt 0 id_, doc (showString "("), prt 0 args, doc (showString ")"), doc (showString ";")])
    AbsCPP.DStructDef struct -> prPrec i 0 (concatD [prt 0 struct])
    AbsCPP.DVarDef variable -> prPrec i 0 (concatD [prt 0 variable, doc (showString ";")])
    AbsCPP.FTopTypedef typedef -> prPrec i 0 (concatD [prt 0 typedef])
    AbsCPP.DUsingDef qconst -> prPrec i 0 (concatD [doc (showString "using"), prt 0 qconst, doc (showString ";")])

instance Print AbsCPP.Struct where
  prt i = \case
    AbsCPP.DStructDecl id_ variables -> prPrec i 0 (concatD [doc (showString "struct"), prt 0 id_, doc (showString "{"), prt 0 variables, doc (showString "}"), doc (showString ";")])

instance Print AbsCPP.Stm where
  prt i = \case
    AbsCPP.SStructDef struct -> prPrec i 0 (concatD [prt 0 struct])
    AbsCPP.SVarStm variable -> prPrec i 0 (concatD [prt 0 variable, doc (showString ";")])
    AbsCPP.STypedef typedef -> prPrec i 0 (concatD [prt 0 typedef])
    AbsCPP.SExp exp -> prPrec i 0 (concatD [prt 0 exp, doc (showString ";")])
    AbsCPP.SReturn exp -> prPrec i 0 (concatD [doc (showString "return"), prt 0 exp, doc (showString ";")])
    AbsCPP.SWhile exp stm -> prPrec i 0 (concatD [doc (showString "while"), doc (showString "("), prt 0 exp, doc (showString ")"), prt 0 stm])
    AbsCPP.SDoWhile stm exp -> prPrec i 0 (concatD [doc (showString "do"), prt 0 stm, doc (showString "while"), doc (showString "("), prt 0 exp, doc (showString ")"), doc (showString ";")])
    AbsCPP.SFor variable exp1 exp2 stm -> prPrec i 0 (concatD [doc (showString "for"), doc (showString "("), prt 0 variable, doc (showString ";"), prt 0 exp1, doc (showString ";"), prt 0 exp2, doc (showString ")"), prt 0 stm])
    AbsCPP.SIf exp stm -> prPrec i 0 (concatD [doc (showString "if"), doc (showString "("), prt 0 exp, doc (showString ")"), prt 0 stm])
    AbsCPP.SIfElse exp stm1 stm2 -> prPrec i 0 (concatD [doc (showString "if"), doc (showString "("), prt 0 exp, doc (showString ")"), prt 0 stm1, doc (showString "else"), prt 0 stm2])
    AbsCPP.SBlock stms -> prPrec i 0 (concatD [doc (showString "{"), prt 0 stms, doc (showString "}")])

instance Print AbsCPP.Variable where
  prt i = \case
    AbsCPP.VIdList type_ idlists -> prPrec i 0 (concatD [prt 0 type_, prt 0 idlists])

instance Print AbsCPP.Typedef where
  prt i = \case
    AbsCPP.DTypedef type_ id_ -> prPrec i 0 (concatD [doc (showString "typedef"), prt 0 type_, prt 0 id_, doc (showString ";")])

instance Print AbsCPP.Arg where
  prt i = \case
    AbsCPP.ATypeDecl type_ -> prPrec i 0 (concatD [prt 0 type_])
    AbsCPP.ADeclId type_ idlist -> prPrec i 0 (concatD [prt 0 type_, prt 0 idlist])

instance Print [AbsCPP.Arg] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print [AbsCPP.Stm] where
  prt _ [] = concatD []
  prt _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print [AbsCPP.Variable] where
  prt _ [] = concatD []
  prt _ (x:xs) = concatD [prt 0 x, doc (showString ";"), prt 0 xs]

instance Print AbsCPP.Exp where
  prt i = \case
    AbsCPP.EInt n -> prPrec i 15 (concatD [prt 0 n])
    AbsCPP.EDouble d -> prPrec i 15 (concatD [prt 0 d])
    AbsCPP.EChar c -> prPrec i 15 (concatD [prt 0 c])
    AbsCPP.EString strs -> prPrec i 15 (concatD [prt 0 strs])
    AbsCPP.EQConstant qconst -> prPrec i 15 (concatD [prt 0 qconst])
    AbsCPP.ETrue -> prPrec i 15 (concatD [doc (showString "true")])
    AbsCPP.EFalse -> prPrec i 15 (concatD [doc (showString "false")])
    AbsCPP.EIndexing exp1 exp2 -> prPrec i 14 (concatD [prt 14 exp1, doc (showString "["), prt 0 exp2, doc (showString "]")])
    AbsCPP.EFunctionCall exp exps -> prPrec i 14 (concatD [prt 14 exp, doc (showString "("), prt 0 exps, doc (showString ")")])
    AbsCPP.EStructureProjection2 exp1 exp2 -> prPrec i 14 (concatD [prt 14 exp1, doc (showString "->"), prt 15 exp2])
    AbsCPP.EStructureProjection1 exp1 exp2 -> prPrec i 14 (concatD [prt 14 exp1, doc (showString "."), prt 15 exp2])
    AbsCPP.EDecrementLeft exp -> prPrec i 14 (concatD [prt 14 exp, doc (showString "--")])
    AbsCPP.EIncrementRightleft exp -> prPrec i 14 (concatD [prt 14 exp, doc (showString "++")])
    AbsCPP.ENegation exp -> prPrec i 13 (concatD [doc (showString "!"), prt 13 exp])
    AbsCPP.EDereference exp -> prPrec i 13 (concatD [doc (showString "*"), prt 13 exp])
    AbsCPP.EDecrementRight exp -> prPrec i 13 (concatD [doc (showString "--"), prt 13 exp])
    AbsCPP.EIncrementRight exp -> prPrec i 13 (concatD [doc (showString "++"), prt 13 exp])
    AbsCPP.EUnaryMinus exp -> prPrec i 13 (concatD [doc (showString "-"), prt 13 exp])
    AbsCPP.EUnaryPlus exp -> prPrec i 13 (concatD [doc (showString "+"), prt 13 exp])
    AbsCPP.EReminder exp1 exp2 -> prPrec i 12 (concatD [prt 12 exp1, doc (showString "%"), prt 13 exp2])
    AbsCPP.EDivision exp1 exp2 -> prPrec i 12 (concatD [prt 12 exp1, doc (showString "/"), prt 13 exp2])
    AbsCPP.EMultiplication exp1 exp2 -> prPrec i 12 (concatD [prt 12 exp1, doc (showString "*"), prt 13 exp2])
    AbsCPP.ESubtraction exp1 exp2 -> prPrec i 11 (concatD [prt 11 exp1, doc (showString "-"), prt 12 exp2])
    AbsCPP.EAddition exp1 exp2 -> prPrec i 11 (concatD [prt 11 exp1, doc (showString "+"), prt 12 exp2])
    AbsCPP.ERightShift exp1 exp2 -> prPrec i 10 (concatD [prt 10 exp1, doc (showString ">>"), prt 11 exp2])
    AbsCPP.ELeftShift exp1 exp2 -> prPrec i 10 (concatD [prt 10 exp1, doc (showString "<<"), prt 11 exp2])
    AbsCPP.EEquivalent exp1 exp2 -> prPrec i 9 (concatD [prt 9 exp1, doc (showString "<=>"), prt 10 exp2])
    AbsCPP.ELessOrEqualThan exp1 exp2 -> prPrec i 9 (concatD [prt 9 exp1, doc (showString "<="), prt 10 exp2])
    AbsCPP.EGreaterOrEqualThan exp1 exp2 -> prPrec i 9 (concatD [prt 9 exp1, doc (showString ">="), prt 10 exp2])
    AbsCPP.EGreaterThan exp1 exp2 -> prPrec i 9 (concatD [prt 9 exp1, doc (showString ">"), prt 10 exp2])
    AbsCPP.ELessThan exp1 exp2 -> prPrec i 9 (concatD [prt 9 exp1, doc (showString "<"), prt 10 exp2])
    AbsCPP.EInequality exp1 exp2 -> prPrec i 8 (concatD [prt 8 exp1, doc (showString "!="), prt 9 exp2])
    AbsCPP.EEquality exp1 exp2 -> prPrec i 8 (concatD [prt 8 exp1, doc (showString "=="), prt 9 exp2])
    AbsCPP.EConjunction exp1 exp2 -> prPrec i 4 (concatD [prt 4 exp1, doc (showString "&&"), prt 5 exp2])
    AbsCPP.EDisjunction exp1 exp2 -> prPrec i 3 (concatD [prt 3 exp1, doc (showString "||"), prt 4 exp2])
    AbsCPP.EAssignment1 exp1 exp2 -> prPrec i 2 (concatD [prt 3 exp1, doc (showString "+="), prt 2 exp2])
    AbsCPP.EAssignment2 exp1 exp2 -> prPrec i 2 (concatD [prt 3 exp1, doc (showString "-="), prt 2 exp2])
    AbsCPP.EAssignment3 exp1 exp2 -> prPrec i 2 (concatD [prt 3 exp1, doc (showString "="), prt 2 exp2])
    AbsCPP.ECondition exp1 exp2 exp3 -> prPrec i 2 (concatD [prt 3 exp1, doc (showString "?"), prt 2 exp2, doc (showString ":"), prt 2 exp3])
    AbsCPP.ECoReturn exp -> prPrec i 1 (concatD [doc (showString "co_return"), prt 0 exp])
    AbsCPP.ECoYield exp -> prPrec i 1 (concatD [doc (showString "co_yield"), prt 0 exp])
    AbsCPP.ECoAwait exp -> prPrec i 1 (concatD [doc (showString "co_await"), prt 0 exp])
    AbsCPP.ETyped exp type_ -> prPrec i 15 (concatD [doc (showString "("), prt 0 exp, doc (showString ":"), prt 0 type_, doc (showString ")")])

instance Print [String] where
  prt _ [] = concatD []
  prt _ [x] = concatD [printString x]
  prt _ (x:xs) = concatD [printString x, prt 0 xs]

instance Print [AbsCPP.Exp] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print AbsCPP.TempInstant where
  prt i = \case
    AbsCPP.TTempInstant id_ types -> prPrec i 0 (concatD [prt 0 id_, doc (showString "<"), prt 0 types, doc (showString ">")])

instance Print AbsCPP.QConst where
  prt i = \case
    AbsCPP.QQConst names -> prPrec i 0 (concatD [prt 0 names])

instance Print AbsCPP.Name where
  prt i = \case
    AbsCPP.NameId id_ -> prPrec i 0 (concatD [prt 0 id_])
    AbsCPP.NameTempInstant tempinstant -> prPrec i 0 (concatD [prt 0 tempinstant])

instance Print [AbsCPP.Name] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString "::"), prt 0 xs]

instance Print [AbsCPP.Type] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print AbsCPP.Type where
  prt i = \case
    AbsCPP.Type1 btype -> prPrec i 0 (concatD [doc (showString "const"), prt 0 btype])
    AbsCPP.Type2 atype -> prPrec i 0 (concatD [doc (showString "constinit"), prt 0 atype])
    AbsCPP.Type3 atype -> prPrec i 0 (concatD [prt 0 atype, doc (showString "&")])
    AbsCPP.TypeAType atype -> prPrec i 0 (concatD [prt 0 atype])

instance Print AbsCPP.AType where
  prt i = \case
    AbsCPP.AType1 gtype -> prPrec i 0 (concatD [doc (showString "const"), prt 0 gtype])
    AbsCPP.ATypeGType gtype -> prPrec i 0 (concatD [prt 0 gtype])

instance Print AbsCPP.BType where
  prt i = \case
    AbsCPP.BType1 gtype -> prPrec i 0 (concatD [doc (showString "constinit"), prt 0 gtype])
    AbsCPP.BTypeGType gtype -> prPrec i 0 (concatD [prt 0 gtype])

instance Print AbsCPP.GType where
  prt i = \case
    AbsCPP.GType_int -> prPrec i 0 (concatD [doc (showString "int")])
    AbsCPP.GType_bool -> prPrec i 0 (concatD [doc (showString "bool")])
    AbsCPP.GType_char -> prPrec i 0 (concatD [doc (showString "char")])
    AbsCPP.GType_double -> prPrec i 0 (concatD [doc (showString "double")])
    AbsCPP.GType_void -> prPrec i 0 (concatD [doc (showString "void")])
    AbsCPP.GTypeQConst qconst -> prPrec i 0 (concatD [prt 0 qconst])

instance Print AbsCPP.IdList where
  prt i = \case
    AbsCPP.IdListId id_ -> prPrec i 0 (concatD [prt 0 id_])
    AbsCPP.IdList1 id_ exp -> prPrec i 0 (concatD [prt 0 id_, doc (showString "="), prt 0 exp])

instance Print [AbsCPP.IdList] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]
