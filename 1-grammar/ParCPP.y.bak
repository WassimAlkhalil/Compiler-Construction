-- -*- haskell -*- File generated by the BNF Converter (bnfc 2.9.4.1).

-- Parser definition for use with Happy
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
{-# LANGUAGE PatternSynonyms #-}

module ParCPP
  ( happyError
  , myLexer
  , pProgram
  , pListDef
  , pDef
  , pStruct
  , pStm
  , pVariable
  , pTypedef
  , pArg
  , pListArg
  , pListStm
  , pListVariable
  , pExp15
  , pExp14
  , pExp13
  , pExp12
  , pExp11
  , pExp10
  , pExp9
  , pExp8
  , pExp4
  , pExp3
  , pExp2
  , pExp1
  , pExp
  , pExp5
  , pExp6
  , pExp7
  , pListString
  , pListExp
  , pTempInstant
  , pQConst
  , pName
  , pListName
  , pListType
  , pType
  , pAType
  , pGType
  , pIdList
  , pListIdList
  ) where

import Prelude

import qualified AbsCPP
import LexCPP

}

%name pProgram Program
%name pListDef ListDef
%name pDef Def
%name pStruct Struct
%name pStm Stm
%name pVariable Variable
%name pTypedef Typedef
%name pArg Arg
%name pListArg ListArg
%name pListStm ListStm
%name pListVariable ListVariable
%name pExp15 Exp15
%name pExp14 Exp14
%name pExp13 Exp13
%name pExp12 Exp12
%name pExp11 Exp11
%name pExp10 Exp10
%name pExp9 Exp9
%name pExp8 Exp8
%name pExp4 Exp4
%name pExp3 Exp3
%name pExp2 Exp2
%name pExp1 Exp1
%name pExp Exp
%name pExp5 Exp5
%name pExp6 Exp6
%name pExp7 Exp7
%name pListString ListString
%name pListExp ListExp
%name pTempInstant TempInstant
%name pQConst QConst
%name pName Name
%name pListName ListName
%name pListType ListType
%name pType Type
%name pAType AType
%name pGType GType
%name pIdList IdList
%name pListIdList ListIdList
-- no lexer declaration
%monad { Err } { (>>=) } { return }
%tokentype {Token}
%token
  '!'         { PT _ (TS _ 1)  }
  '!='        { PT _ (TS _ 2)  }
  '%'         { PT _ (TS _ 3)  }
  '&'         { PT _ (TS _ 4)  }
  '&&'        { PT _ (TS _ 5)  }
  '('         { PT _ (TS _ 6)  }
  ')'         { PT _ (TS _ 7)  }
  '*'         { PT _ (TS _ 8)  }
  '+'         { PT _ (TS _ 9)  }
  '++'        { PT _ (TS _ 10) }
  '+='        { PT _ (TS _ 11) }
  ','         { PT _ (TS _ 12) }
  '-'         { PT _ (TS _ 13) }
  '--'        { PT _ (TS _ 14) }
  '-='        { PT _ (TS _ 15) }
  '->'        { PT _ (TS _ 16) }
  '.'         { PT _ (TS _ 17) }
  '/'         { PT _ (TS _ 18) }
  ':'         { PT _ (TS _ 19) }
  '::'        { PT _ (TS _ 20) }
  ';'         { PT _ (TS _ 21) }
  '<'         { PT _ (TS _ 22) }
  '<<'        { PT _ (TS _ 23) }
  '<='        { PT _ (TS _ 24) }
  '<=>'       { PT _ (TS _ 25) }
  '='         { PT _ (TS _ 26) }
  '=='        { PT _ (TS _ 27) }
  '>'         { PT _ (TS _ 28) }
  '>='        { PT _ (TS _ 29) }
  '>>'        { PT _ (TS _ 30) }
  '?'         { PT _ (TS _ 31) }
  '['         { PT _ (TS _ 32) }
  ']'         { PT _ (TS _ 33) }
  'bool'      { PT _ (TS _ 34) }
  'char'      { PT _ (TS _ 35) }
  'co_await'  { PT _ (TS _ 36) }
  'co_return' { PT _ (TS _ 37) }
  'co_yield'  { PT _ (TS _ 38) }
  'const'     { PT _ (TS _ 39) }
  'constinit' { PT _ (TS _ 40) }
  'do'        { PT _ (TS _ 41) }
  'double'    { PT _ (TS _ 42) }
  'else'      { PT _ (TS _ 43) }
  'false'     { PT _ (TS _ 44) }
  'for'       { PT _ (TS _ 45) }
  'if'        { PT _ (TS _ 46) }
  'inline'    { PT _ (TS _ 47) }
  'int'       { PT _ (TS _ 48) }
  'return'    { PT _ (TS _ 49) }
  'struct'    { PT _ (TS _ 50) }
  'true'      { PT _ (TS _ 51) }
  'typedef'   { PT _ (TS _ 52) }
  'using'     { PT _ (TS _ 53) }
  'void'      { PT _ (TS _ 54) }
  'while'     { PT _ (TS _ 55) }
  '{'         { PT _ (TS _ 56) }
  '||'        { PT _ (TS _ 57) }
  '}'         { PT _ (TS _ 58) }
  L_charac    { PT _ (TC $$)   }
  L_doubl     { PT _ (TD $$)   }
  L_integ     { PT _ (TI $$)   }
  L_quoted    { PT _ (TL $$)   }
  L_Id        { PT _ (T_Id $$) }

%%

Char    :: { Char }
Char     : L_charac { (read $1) :: Char }

Double  :: { Double }
Double   : L_doubl  { (read $1) :: Double }

Integer :: { Integer }
Integer  : L_integ  { (read $1) :: Integer }

String  :: { String }
String   : L_quoted { $1 }

Id :: { AbsCPP.Id }
Id  : L_Id { AbsCPP.Id $1 }

Program :: { AbsCPP.Program }
Program : ListDef { AbsCPP.PDefs $1 }

ListDef :: { [AbsCPP.Def] }
ListDef : {- empty -} { [] } | Def ListDef { (:) $1 $2 }

Def :: { AbsCPP.Def }
Def
  : Type Id '(' ListArg ')' '{' ListStm '}' { AbsCPP.FunDefWithBody $1 $2 $4 $7 }
  | Type Id '(' ListArg ')' ';' { AbsCPP.FunDefWithoutBody $1 $2 $4 }
  | 'inline' Type Id '(' ListArg ')' '{' ListStm '}' { AbsCPP.InlineDefWithBody $2 $3 $5 $8 }
  | 'inline' Type Id '(' ListArg ')' ';' { AbsCPP.InlineDefWithoutBody $2 $3 $5 }
  | Struct { AbsCPP.DStructDef $1 }
  | Variable ';' { AbsCPP.DVarDef $1 }
  | Typedef { AbsCPP.FTopTypedef $1 }
  | 'using' QConst ';' { AbsCPP.DUsingDef $2 }

Struct :: { AbsCPP.Struct }
Struct
  : 'struct' Id '{' ListVariable '}' ';' { AbsCPP.DStructDecl $2 $4 }

Stm :: { AbsCPP.Stm }
Stm
  : Struct { AbsCPP.SStructDef $1 }
  | Variable ';' { AbsCPP.SVarStm $1 }
  | Typedef { AbsCPP.STypedef $1 }
  | Exp ';' { AbsCPP.SExp $1 }
  | 'return' Exp ';' { AbsCPP.SReturn $2 }
  | 'while' '(' Exp ')' Stm { AbsCPP.SWhile $3 $5 }
  | 'do' Stm 'while' '(' Exp ')' ';' { AbsCPP.SDoWhile $2 $5 }
  | 'for' '(' Variable ';' Exp ';' Exp ')' Stm { AbsCPP.SFor $3 $5 $7 $9 }
  | 'if' '(' Exp ')' Stm { AbsCPP.SIf $3 $5 }
  | 'if' '(' Exp ')' Stm 'else' Stm { AbsCPP.SIfElse $3 $5 $7 }
  | '{' ListStm '}' { AbsCPP.SBlock $2 }

Variable :: { AbsCPP.Variable }
Variable : Type ListIdList { AbsCPP.VIdList $1 $2 }

Typedef :: { AbsCPP.Typedef }
Typedef : 'typedef' Type Id ';' { AbsCPP.DTypedef $2 $3 }

Arg :: { AbsCPP.Arg }
Arg
  : Type { AbsCPP.ATypeDecl $1 }
  | Type IdList { AbsCPP.ADeclId $1 $2 }

ListArg :: { [AbsCPP.Arg] }
ListArg
  : {- empty -} { [] }
  | Arg { (:[]) $1 }
  | Arg ',' ListArg { (:) $1 $3 }

ListStm :: { [AbsCPP.Stm] }
ListStm : {- empty -} { [] } | Stm ListStm { (:) $1 $2 }

ListVariable :: { [AbsCPP.Variable] }
ListVariable
  : {- empty -} { [] } | Variable ';' ListVariable { (:) $1 $3 }

Exp15 :: { AbsCPP.Exp }
Exp15
  : Integer { AbsCPP.EInt $1 }
  | Double { AbsCPP.EDouble $1 }
  | Char { AbsCPP.EChar $1 }
  | ListString { AbsCPP.EString $1 }
  | QConst { AbsCPP.EQConstant $1 }
  | 'true' { AbsCPP.ETrue }
  | 'false' { AbsCPP.EFalse }
  | '(' Exp ')' { $2 }

Exp14 :: { AbsCPP.Exp }
Exp14
  : Exp14 '[' Exp ']' { AbsCPP.EIndexing $1 $3 }
  | Exp14 '(' ListExp ')' { AbsCPP.EFunctionCall $1 $3 }
  | Exp14 '->' Exp15 { AbsCPP.EStructureProjection2 $1 $3 }
  | Exp14 '.' Exp15 { AbsCPP.EStructureProjection1 $1 $3 }
  | Exp14 '--' { AbsCPP.EDecrementLeft $1 }
  | Exp14 '++' { AbsCPP.EIncrementRightleft $1 }
  | Exp15 { $1 }

Exp13 :: { AbsCPP.Exp }
Exp13
  : '!' Exp13 { AbsCPP.ENegation $2 }
  | '*' Exp13 { AbsCPP.EDereference $2 }
  | '--' Exp13 { AbsCPP.EDecrementRight $2 }
  | '++' Exp13 { AbsCPP.EIncrementRight $2 }
  | '-' Exp13 { AbsCPP.EUnaryMinus $2 }
  | '+' Exp13 { AbsCPP.EUnaryPlus $2 }
  | Exp14 { $1 }

Exp12 :: { AbsCPP.Exp }
Exp12
  : Exp12 '%' Exp13 { AbsCPP.EReminder $1 $3 }
  | Exp12 '/' Exp13 { AbsCPP.EDivision $1 $3 }
  | Exp12 '*' Exp13 { AbsCPP.EMultiplication $1 $3 }
  | Exp13 { $1 }

Exp11 :: { AbsCPP.Exp }
Exp11
  : Exp11 '-' Exp12 { AbsCPP.ESubtraction $1 $3 }
  | Exp11 '+' Exp12 { AbsCPP.EAddition $1 $3 }
  | Exp12 { $1 }

Exp10 :: { AbsCPP.Exp }
Exp10
  : Exp10 '>>' Exp11 { AbsCPP.ERightShift $1 $3 }
  | Exp10 '<<' Exp11 { AbsCPP.ELeftShift $1 $3 }
  | Exp11 { $1 }

Exp9 :: { AbsCPP.Exp }
Exp9
  : Exp9 '<=>' Exp10 { AbsCPP.EEquivalent $1 $3 }
  | Exp9 '<=' Exp10 { AbsCPP.ELessOrEqualThan $1 $3 }
  | Exp9 '>=' Exp10 { AbsCPP.EGreaterOrEqualThan $1 $3 }
  | Exp9 '>' Exp10 { AbsCPP.EGreaterThan $1 $3 }
  | Exp9 '<' Exp10 { AbsCPP.ELessThan $1 $3 }
  | Exp10 { $1 }

Exp8 :: { AbsCPP.Exp }
Exp8
  : Exp8 '!=' Exp9 { AbsCPP.EInequality $1 $3 }
  | Exp8 '==' Exp9 { AbsCPP.EEquality $1 $3 }
  | Exp9 { $1 }

Exp4 :: { AbsCPP.Exp }
Exp4 : Exp4 '&&' Exp5 { AbsCPP.EConjunction $1 $3 } | Exp5 { $1 }

Exp3 :: { AbsCPP.Exp }
Exp3 : Exp3 '||' Exp4 { AbsCPP.EDisjunction $1 $3 } | Exp4 { $1 }

Exp2 :: { AbsCPP.Exp }
Exp2
  : Exp3 '+=' Exp2 { AbsCPP.EAssignment1 $1 $3 }
  | Exp3 '-=' Exp2 { AbsCPP.EAssignment2 $1 $3 }
  | Exp3 '=' Exp2 { AbsCPP.EAssignment3 $1 $3 }
  | Exp3 '?' Exp2 ':' Exp2 { AbsCPP.ECondition $1 $3 $5 }
  | Exp3 { $1 }

Exp1 :: { AbsCPP.Exp }
Exp1
  : 'co_return' Exp { AbsCPP.ECoReturn $2 }
  | 'co_yield' Exp { AbsCPP.ECoYield $2 }
  | 'co_await' Exp { AbsCPP.ECoAwait $2 }
  | Exp2 { $1 }

Exp :: { AbsCPP.Exp }
Exp : Exp1 { $1 }

Exp5 :: { AbsCPP.Exp }
Exp5 : Exp6 { $1 }

Exp6 :: { AbsCPP.Exp }
Exp6 : Exp7 { $1 }

Exp7 :: { AbsCPP.Exp }
Exp7 : Exp8 { $1 }

ListString :: { [String] }
ListString : String { (:[]) $1 } | String ListString { (:) $1 $2 }

ListExp :: { [AbsCPP.Exp] }
ListExp
  : {- empty -} { [] }
  | Exp { (:[]) $1 }
  | Exp ',' ListExp { (:) $1 $3 }

TempInstant :: { AbsCPP.TempInstant }
TempInstant : Id '<' ListType '>' { AbsCPP.TTempInstant $1 $3 }

QConst :: { AbsCPP.QConst }
QConst : ListName { AbsCPP.QQConst $1 }

Name :: { AbsCPP.Name }
Name
  : Id { AbsCPP.NameId $1 }
  | TempInstant { AbsCPP.NameTempInstant $1 }

ListName :: { [AbsCPP.Name] }
ListName : Name { (:[]) $1 } | Name '::' ListName { (:) $1 $3 }

ListType :: { [AbsCPP.Type] }
ListType : Type { (:[]) $1 } | Type ',' ListType { (:) $1 $3 }

Type :: { AbsCPP.Type }
Type
  : 'constinit' AType { AbsCPP.Type1 $2 }
  | AType '&' { AbsCPP.Type2 $1 }
  | AType { AbsCPP.TypeAType $1 }

AType :: { AbsCPP.AType }
AType
  : 'const' GType { AbsCPP.AType1 $2 }
  | GType { AbsCPP.ATypeGType $1 }

GType :: { AbsCPP.GType }
GType
  : 'int' { AbsCPP.GType_int }
  | 'bool' { AbsCPP.GType_bool }
  | 'char' { AbsCPP.GType_char }
  | 'double' { AbsCPP.GType_double }
  | 'void' { AbsCPP.GType_void }
  | QConst { AbsCPP.GTypeQConst $1 }

IdList :: { AbsCPP.IdList }
IdList
  : Id { AbsCPP.IdListId $1 } | Id '=' Exp { AbsCPP.IdList1 $1 $3 }

ListIdList :: { [AbsCPP.IdList] }
ListIdList
  : IdList { (:[]) $1 } | IdList ',' ListIdList { (:) $1 $3 }

{

type Err = Either String

happyError :: [Token] -> Err a
happyError ts = Left $
  "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ (prToken t) ++ "'"

myLexer :: String -> [Token]
myLexer = tokens

}

