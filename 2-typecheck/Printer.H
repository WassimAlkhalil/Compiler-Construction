/* File generated by the BNF Converter (bnfc 2.9.4). */

#ifndef PRINTER_HEADER
#define PRINTER_HEADER

#include "Absyn.H"
#include <stdio.h>
#include <stddef.h>
#include <string.h>
#include <stdlib.h>


/* Certain applications may improve performance by changing the buffer size */
#define BUFFER_INITIAL 2000
/* You may wish to change _L_PAREN or _R_PAREN */
#define _L_PAREN '('
#define _R_PAREN ')'

class PrintAbsyn : public Visitor
{
 protected:
  int _n_, _i_;
  /* The following are simple heuristics for rendering terminals */
  /* You may wish to change them */
  void render(Char c);
  void render(String s);
  void render(const char *s);
  void indent(void);
  void backup(void);
  void onEmptyLine(void);
  void removeTrailingSpaces(void);
  void removeTrailingWhitespace(void);
 public:
  PrintAbsyn(void);
  ~PrintAbsyn(void);
  char *print(Visitable *v);

  void visitProgram(Program *p); /* abstract class */
  void visitPDefs(PDefs *p);
  void visitDef(Def *p); /* abstract class */
  void visitDFun(DFun *p);
  void visitDStruct(DStruct *p);
  void visitListDef(ListDef *p);
  void iterListDef(ListDef::const_iterator i, ListDef::const_iterator j);
  void visitField(Field *p); /* abstract class */
  void visitFDecl(FDecl *p);
  void visitListField(ListField *p);
  void iterListField(ListField::const_iterator i, ListField::const_iterator j);
  void visitArg(Arg *p); /* abstract class */
  void visitADecl(ADecl *p);
  void visitListArg(ListArg *p);
  void iterListArg(ListArg::const_iterator i, ListArg::const_iterator j);
  void visitStm(Stm *p); /* abstract class */
  void visitSExp(SExp *p);
  void visitSDecls(SDecls *p);
  void visitSReturn(SReturn *p);
  void visitSReturnV(SReturnV *p);
  void visitSWhile(SWhile *p);
  void visitSDoWhile(SDoWhile *p);
  void visitSFor(SFor *p);
  void visitSBlock(SBlock *p);
  void visitSIfElse(SIfElse *p);
  void visitListStm(ListStm *p);
  void iterListStm(ListStm::const_iterator i, ListStm::const_iterator j);
  void visitIdIn(IdIn *p); /* abstract class */
  void visitIdNoInit(IdNoInit *p);
  void visitIdInit(IdInit *p);
  void visitListIdIn(ListIdIn *p);
  void iterListIdIn(ListIdIn::const_iterator i, ListIdIn::const_iterator j);
  void visitExp(Exp *p); /* abstract class */
  void visitETrue(ETrue *p);
  void visitEFalse(EFalse *p);
  void visitEInt(EInt *p);
  void visitEDouble(EDouble *p);
  void visitEId(EId *p);
  void visitEApp(EApp *p);
  void visitEProj(EProj *p);
  void visitEPIncr(EPIncr *p);
  void visitEPDecr(EPDecr *p);
  void visitEIncr(EIncr *p);
  void visitEDecr(EDecr *p);
  void visitEUPlus(EUPlus *p);
  void visitEUMinus(EUMinus *p);
  void visitETimes(ETimes *p);
  void visitEDiv(EDiv *p);
  void visitEPlus(EPlus *p);
  void visitEMinus(EMinus *p);
  void visitETwc(ETwc *p);
  void visitELt(ELt *p);
  void visitEGt(EGt *p);
  void visitELtEq(ELtEq *p);
  void visitEGtEq(EGtEq *p);
  void visitEEq(EEq *p);
  void visitENEq(ENEq *p);
  void visitEAnd(EAnd *p);
  void visitEOr(EOr *p);
  void visitEAss(EAss *p);
  void visitECond(ECond *p);
  void visitListExp(ListExp *p);
  void iterListExp(ListExp::const_iterator i, ListExp::const_iterator j);
  void visitType(Type *p); /* abstract class */
  void visitType_bool(Type_bool *p);
  void visitType_int(Type_int *p);
  void visitType_double(Type_double *p);
  void visitType_void(Type_void *p);
  void visitTypeId(TypeId *p);
  void visitListId(ListId *p);
  void iterListId(ListId::const_iterator i, ListId::const_iterator j);

  void visitInteger(Integer i);
  void visitDouble(Double d);
  void visitChar(Char c);
  void visitString(String s);
  void visitIdent(String s);
  void visitId(String s);
 protected:
  char *buf_;
  size_t cur_, buf_size;

  void inline bufAppend(const char *s)
  {
    size_t end = cur_ + strlen(s);
    if (end >= buf_size) {
      do buf_size *= 2; /* Double the buffer size */
      while (end >= buf_size);
      resizeBuffer();
    }
    strcpy(&buf_[cur_], s);
    cur_ = end;
  }

  void inline bufAppend(const char c)
  {
    if (cur_ + 1 >= buf_size)
    {
      buf_size *= 2; /* Double the buffer size */
      resizeBuffer();
    }
    buf_[cur_] = c;
    buf_[++cur_] = 0;
  }

  void inline bufAppend(String str)
  {
    const char *s = str.c_str();
    bufAppend(s);
  }
  void inline bufReset(void)
  {
    if (buf_) delete[] buf_;
    buf_size = BUFFER_INITIAL;
    buf_ = new char[buf_size];
    memset(buf_, 0, buf_size);
    cur_ = 0;
  }

  void inline resizeBuffer(void)
  {
    char *temp = new char[buf_size];
    if (buf_)
    {
      strcpy(temp, buf_);
      delete[] buf_;
    }
    buf_ = temp;
  }
};



class ShowAbsyn : public Visitor
{
 public:
  ShowAbsyn(void);
  ~ShowAbsyn(void);
  char *show(Visitable *v);

  void visitProgram(Program *p); /* abstract class */
  void visitPDefs(PDefs *p);
  void visitDef(Def *p); /* abstract class */
  void visitDFun(DFun *p);
  void visitDStruct(DStruct *p);
  void visitListDef(ListDef *p);
  void iterListDef(ListDef::const_iterator i, ListDef::const_iterator j);
  void visitField(Field *p); /* abstract class */
  void visitFDecl(FDecl *p);
  void visitListField(ListField *p);
  void iterListField(ListField::const_iterator i, ListField::const_iterator j);
  void visitArg(Arg *p); /* abstract class */
  void visitADecl(ADecl *p);
  void visitListArg(ListArg *p);
  void iterListArg(ListArg::const_iterator i, ListArg::const_iterator j);
  void visitStm(Stm *p); /* abstract class */
  void visitSExp(SExp *p);
  void visitSDecls(SDecls *p);
  void visitSReturn(SReturn *p);
  void visitSReturnV(SReturnV *p);
  void visitSWhile(SWhile *p);
  void visitSDoWhile(SDoWhile *p);
  void visitSFor(SFor *p);
  void visitSBlock(SBlock *p);
  void visitSIfElse(SIfElse *p);
  void visitListStm(ListStm *p);
  void iterListStm(ListStm::const_iterator i, ListStm::const_iterator j);
  void visitIdIn(IdIn *p); /* abstract class */
  void visitIdNoInit(IdNoInit *p);
  void visitIdInit(IdInit *p);
  void visitListIdIn(ListIdIn *p);
  void iterListIdIn(ListIdIn::const_iterator i, ListIdIn::const_iterator j);
  void visitExp(Exp *p); /* abstract class */
  void visitETrue(ETrue *p);
  void visitEFalse(EFalse *p);
  void visitEInt(EInt *p);
  void visitEDouble(EDouble *p);
  void visitEId(EId *p);
  void visitEApp(EApp *p);
  void visitEProj(EProj *p);
  void visitEPIncr(EPIncr *p);
  void visitEPDecr(EPDecr *p);
  void visitEIncr(EIncr *p);
  void visitEDecr(EDecr *p);
  void visitEUPlus(EUPlus *p);
  void visitEUMinus(EUMinus *p);
  void visitETimes(ETimes *p);
  void visitEDiv(EDiv *p);
  void visitEPlus(EPlus *p);
  void visitEMinus(EMinus *p);
  void visitETwc(ETwc *p);
  void visitELt(ELt *p);
  void visitEGt(EGt *p);
  void visitELtEq(ELtEq *p);
  void visitEGtEq(EGtEq *p);
  void visitEEq(EEq *p);
  void visitENEq(ENEq *p);
  void visitEAnd(EAnd *p);
  void visitEOr(EOr *p);
  void visitEAss(EAss *p);
  void visitECond(ECond *p);
  void visitListExp(ListExp *p);
  void iterListExp(ListExp::const_iterator i, ListExp::const_iterator j);
  void visitType(Type *p); /* abstract class */
  void visitType_bool(Type_bool *p);
  void visitType_int(Type_int *p);
  void visitType_double(Type_double *p);
  void visitType_void(Type_void *p);
  void visitTypeId(TypeId *p);
  void visitListId(ListId *p);
  void iterListId(ListId::const_iterator i, ListId::const_iterator j);

  void visitInteger(Integer i);
  void visitDouble(Double d);
  void visitChar(Char c);
  void visitString(String s);
  void visitIdent(String s);
  void visitId(String s);
 protected:
  char *buf_;
  size_t cur_, buf_size;

  void inline bufAppend(const char *s)
  {
    size_t end = cur_ + strlen(s);
    if (end >= buf_size) {
      do buf_size *= 2; /* Double the buffer size */
      while (end >= buf_size);
      resizeBuffer();
    }
    strcpy(&buf_[cur_], s);
    cur_ = end;
  }

  void inline bufAppend(const char c)
  {
    if (cur_ + 1 >= buf_size)
    {
      buf_size *= 2; /* Double the buffer size */
      resizeBuffer();
    }
    buf_[cur_] = c;
    buf_[++cur_] = 0;
  }

  void inline bufAppend(String str)
  {
    const char *s = str.c_str();
    bufAppend(s);
  }
  void inline bufReset(void)
  {
    if (buf_) delete[] buf_;
    buf_size = BUFFER_INITIAL;
    buf_ = new char[buf_size];
    memset(buf_, 0, buf_size);
    cur_ = 0;
  }

  void inline resizeBuffer(void)
  {
    char *temp = new char[buf_size];
    if (buf_)
    {
      strcpy(temp, buf_);
      delete[] buf_;
    }
    buf_ = temp;
  }
};




#endif

